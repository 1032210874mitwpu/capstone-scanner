import requests, re, subprocess, os, time
from bs4 import BeautifulSoup

class WebVulnerabilityScanner:
    def __init__(self, models, tfidf, label_encoder):
        self.models = models
        self.tfidf = tfidf
        self.label_encoder = label_encoder
        self.signatures = {
            'sql_injection': re.compile(r"(union.*select|select.*from|insert.*into)", re.I),
            'xss': re.compile(r"(<script>|javascript:|onerror=)", re.I),
            'csrf': re.compile(r"csrf_token", re.I)
        }

    def scan_website(self, url):
        result = {
            'url': url,
            'timestamp': time.strftime("%Y-%m-%d %H:%M:%S"),
            'models': {},
            'signatures': {},
            'tools': {}
        }

        try:
            # Step 1: Machine Learning Prediction
            response = requests.get(url, timeout=10)
            content = response.text
            features = self.tfidf.transform([content])

            result['models'] = {name: self.label_encoder.inverse_transform([model.predict(features)[0]])[0]
                                for name, model in self.models.items()}

            # Step 2: Signature-Based Scanning
            result['signatures'] = {sig: "Potential match" 
                                    for sig, pattern in self.signatures.items() 
                                    if pattern.search(content)}
            
            # Step 3: OWASP ZAP Scan
            zap_result = self.scan_with_zap(url)
            result['tools']['owasp_zap'] = zap_result

            # Step 4: Nikto Scan
            nikto_result = self.scan_with_nikto(url)
            result['tools']['nikto'] = nikto_result

            # Step 5: SQLMap Scan
            sqlmap_result = self.scan_with_sqlmap(url)
            result['tools']['sqlmap'] = sqlmap_result

        except Exception as e:
            print(f"Scan error: {e}")
            result['error'] = str(e)

        return result

    def scan_with_zap(self, url):
        """Run OWASP ZAP scan (requires ZAP daemon running)"""
        try:
            print(f"Starting OWASP ZAP scan for {url}")
            zap_api = 'http://localhost:8080'  # default ZAP API address
            scan_url = f"{zap_api}/JSON/ascan/action/scan/?url={url}"
            requests.get(scan_url)
            time.sleep(10)  # Wait for scanning
            return "ZAP Scan started successfully"
        except Exception as e:
            return f"ZAP Scan failed: {str(e)}"

    def scan_with_nikto(self, url):
        """Run Nikto web scanner"""
        try:
            print(f"Starting Nikto scan for {url}")
            output = subprocess.check_output(["nikto", "-h", url], stderr=subprocess.STDOUT, text=True, timeout=120)
            return output
        except Exception as e:
            return f"Nikto Scan failed: {str(e)}"

    def scan_with_sqlmap(self, url):
        """Run SQLMap basic scan"""
        try:
            print(f"Starting SQLMap scan for {url}")
            output = subprocess.check_output(["sqlmap", "-u", url, "--batch", "--crawl=1"], stderr=subprocess.STDOUT, text=True, timeout=120)
            return output
        except Exception as e:
            return f"SQLMap Scan failed: {str(e)}"