from fpdf import FPDF
from datetime import datetime

class PDFReport(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'AI Web Vulnerability Scan Report', 0, 1, 'C')
        self.ln(10)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')
    
    def add_vulnerability_section(self, title, content):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, title, 0, 1)
        self.set_font('Arial', '', 10)
        self.multi_cell(0, 8, content)
        self.ln(5)
    
    def add_model_result(self, model_name, prediction, confidence, severity):
        self.set_font('Arial', 'B', 12)
        self.cell(50, 10, model_name + ':', 0, 0)
        
        # Set color based on severity
        if severity == 'Critical':
            self.set_text_color(255, 0, 0)
        elif severity == 'High':
            self.set_text_color(220, 120, 0)
        
        self.cell(0, 10, prediction, 0, 1)
        self.set_text_color(0, 0, 0)  # Reset color
        
        self.set_font('Arial', '', 10)
        self.cell(50, 8, 'Confidence:')
        self.cell(0, 8, f'{confidence}%', 0, 1)
        
        self.cell(50, 8, 'Severity:')
        
        # Color severity
        if severity == 'Critical':
            self.set_text_color(255, 0, 0)
        elif severity == 'High':
            self.set_text_color(220, 120, 0)
        
        self.cell(0, 8, severity, 0, 1)
        self.set_text_color(0, 0, 0)  # Reset color
        self.ln(3)

def generate_pdf(report_data, output_path):
    pdf = PDFReport()
    pdf.add_page()
    
    # Report metadata
    pdf.set_font('Arial', '', 10)
    pdf.cell(0, 8, f'Report generated: {report_data["timestamp"]}', 0, 1)
    pdf.cell(0, 8, f'Scanned URL: {report_data["url"]}', 0, 1)
    pdf.ln(10)
    
    # Model results section
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, 'Model Predictions:', 0, 1)
    pdf.ln(5)
    
    for model_name, results in report_data['models'].items():
        pdf.add_model_result(
            model_name,
            results['prediction'],
            results['confidence'],
            results['severity']
        )
    
    # Consensus assessment
    if 'consensus' in report_data:
        pdf.ln(10)
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Consensus Assessment:', 0, 1)
        pdf.ln(5)
        
        pdf.add_model_result(
            "Most Likely Vulnerability",
            report_data['consensus']['vulnerability'],
            report_data['consensus']['confidence'],
            report_data['consensus']['severity']
        )
    
    # Signature findings (if any)
    if report_data['signatures']:
        pdf.ln(10)
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, 'Signature-Based Findings:', 0, 1)
        pdf.ln(5)
        
        for sig in report_data['signatures']:
            pdf.add_vulnerability_section(sig['name'], sig['description'])
    
    # Save PDF
    pdf.output(output_path)